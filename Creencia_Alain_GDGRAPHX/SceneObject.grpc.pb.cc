// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SceneObject.proto

#include "SceneObject.pb.h"
#include "SceneObject.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* SceneLoader_method_names[] = {
  "/SceneLoader/LoadObjects",
  "/SceneLoader/SceneLoadingProgess",
};

std::unique_ptr< SceneLoader::Stub> SceneLoader::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SceneLoader::Stub> stub(new SceneLoader::Stub(channel, options));
  return stub;
}

SceneLoader::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LoadObjects_(SceneLoader_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SceneLoadingProgess_(SceneLoader_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::ObjModel>* SceneLoader::Stub::LoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request) {
  return ::grpc::internal::ClientReaderFactory< ::ObjModel>::Create(channel_.get(), rpcmethod_LoadObjects_, context, request);
}

void SceneLoader::Stub::async::LoadObjects(::grpc::ClientContext* context, const ::Integer* request, ::grpc::ClientReadReactor< ::ObjModel>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ObjModel>::Create(stub_->channel_.get(), stub_->rpcmethod_LoadObjects_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ObjModel>* SceneLoader::Stub::AsyncLoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ObjModel>::Create(channel_.get(), cq, rpcmethod_LoadObjects_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ObjModel>* SceneLoader::Stub::PrepareAsyncLoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ObjModel>::Create(channel_.get(), cq, rpcmethod_LoadObjects_, context, request, false, nullptr);
}

::grpc::Status SceneLoader::Stub::SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::Float* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Integer, ::Float, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SceneLoadingProgess_, context, request, response);
}

void SceneLoader::Stub::async::SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer* request, ::Float* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Integer, ::Float, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SceneLoadingProgess_, context, request, response, std::move(f));
}

void SceneLoader::Stub::async::SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer* request, ::Float* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SceneLoadingProgess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Float>* SceneLoader::Stub::PrepareAsyncSceneLoadingProgessRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Float, ::Integer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SceneLoadingProgess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Float>* SceneLoader::Stub::AsyncSceneLoadingProgessRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSceneLoadingProgessRaw(context, request, cq);
  result->StartCall();
  return result;
}

SceneLoader::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoader_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SceneLoader::Service, ::Integer, ::ObjModel>(
          [](SceneLoader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Integer* req,
             ::grpc::ServerWriter<::ObjModel>* writer) {
               return service->LoadObjects(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoader_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneLoader::Service, ::Integer, ::Float, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SceneLoader::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Integer* req,
             ::Float* resp) {
               return service->SceneLoadingProgess(ctx, req, resp);
             }, this)));
}

SceneLoader::Service::~Service() {
}

::grpc::Status SceneLoader::Service::LoadObjects(::grpc::ServerContext* context, const ::Integer* request, ::grpc::ServerWriter< ::ObjModel>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneLoader::Service::SceneLoadingProgess(::grpc::ServerContext* context, const ::Integer* request, ::Float* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


