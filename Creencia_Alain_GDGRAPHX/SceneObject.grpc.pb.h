// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SceneObject.proto
#ifndef GRPC_SceneObject_2eproto__INCLUDED
#define GRPC_SceneObject_2eproto__INCLUDED

#include "SceneObject.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class SceneLoader final {
 public:
  static constexpr char const* service_full_name() {
    return "SceneLoader";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ObjModel>> LoadObjects(::grpc::ClientContext* context, const ::Integer& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ObjModel>>(LoadObjectsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjModel>> AsyncLoadObjects(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjModel>>(AsyncLoadObjectsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjModel>> PrepareAsyncLoadObjects(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ObjModel>>(PrepareAsyncLoadObjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::Float* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Float>> AsyncSceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Float>>(AsyncSceneLoadingProgessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Float>> PrepareAsyncSceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Float>>(PrepareAsyncSceneLoadingProgessRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void LoadObjects(::grpc::ClientContext* context, const ::Integer* request, ::grpc::ClientReadReactor< ::ObjModel>* reactor) = 0;
      virtual void SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer* request, ::Float* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer* request, ::Float* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::ObjModel>* LoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ObjModel>* AsyncLoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ObjModel>* PrepareAsyncLoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Float>* AsyncSceneLoadingProgessRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Float>* PrepareAsyncSceneLoadingProgessRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::ObjModel>> LoadObjects(::grpc::ClientContext* context, const ::Integer& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ObjModel>>(LoadObjectsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjModel>> AsyncLoadObjects(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjModel>>(AsyncLoadObjectsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjModel>> PrepareAsyncLoadObjects(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ObjModel>>(PrepareAsyncLoadObjectsRaw(context, request, cq));
    }
    ::grpc::Status SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::Float* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Float>> AsyncSceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Float>>(AsyncSceneLoadingProgessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Float>> PrepareAsyncSceneLoadingProgess(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Float>>(PrepareAsyncSceneLoadingProgessRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LoadObjects(::grpc::ClientContext* context, const ::Integer* request, ::grpc::ClientReadReactor< ::ObjModel>* reactor) override;
      void SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer* request, ::Float* response, std::function<void(::grpc::Status)>) override;
      void SceneLoadingProgess(::grpc::ClientContext* context, const ::Integer* request, ::Float* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::ObjModel>* LoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request) override;
    ::grpc::ClientAsyncReader< ::ObjModel>* AsyncLoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ObjModel>* PrepareAsyncLoadObjectsRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Float>* AsyncSceneLoadingProgessRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Float>* PrepareAsyncSceneLoadingProgessRaw(::grpc::ClientContext* context, const ::Integer& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadObjects_;
    const ::grpc::internal::RpcMethod rpcmethod_SceneLoadingProgess_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status LoadObjects(::grpc::ServerContext* context, const ::Integer* request, ::grpc::ServerWriter< ::ObjModel>* writer);
    virtual ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* context, const ::Integer* request, ::Float* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadObjects() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjects(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::grpc::ServerWriter< ::ObjModel>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadObjects(::grpc::ServerContext* context, ::Integer* request, ::grpc::ServerAsyncWriter< ::ObjModel>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SceneLoadingProgess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SceneLoadingProgess() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SceneLoadingProgess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSceneLoadingProgess(::grpc::ServerContext* context, ::Integer* request, ::grpc::ServerAsyncResponseWriter< ::Float>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadObjects<WithAsyncMethod_SceneLoadingProgess<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LoadObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadObjects() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Integer, ::ObjModel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Integer* request) { return this->LoadObjects(context, request); }));
    }
    ~WithCallbackMethod_LoadObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjects(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::grpc::ServerWriter< ::ObjModel>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ObjModel>* LoadObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::Integer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SceneLoadingProgess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SceneLoadingProgess() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Integer, ::Float>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Integer* request, ::Float* response) { return this->SceneLoadingProgess(context, request, response); }));}
    void SetMessageAllocatorFor_SceneLoadingProgess(
        ::grpc::MessageAllocator< ::Integer, ::Float>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Integer, ::Float>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SceneLoadingProgess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SceneLoadingProgess(
      ::grpc::CallbackServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LoadObjects<WithCallbackMethod_SceneLoadingProgess<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadObjects() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjects(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::grpc::ServerWriter< ::ObjModel>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SceneLoadingProgess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SceneLoadingProgess() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SceneLoadingProgess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadObjects() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjects(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::grpc::ServerWriter< ::ObjModel>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadObjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SceneLoadingProgess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SceneLoadingProgess() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SceneLoadingProgess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSceneLoadingProgess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadObjects() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->LoadObjects(context, request); }));
    }
    ~WithRawCallbackMethod_LoadObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadObjects(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::grpc::ServerWriter< ::ObjModel>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* LoadObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SceneLoadingProgess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SceneLoadingProgess() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SceneLoadingProgess(context, request, response); }));
    }
    ~WithRawCallbackMethod_SceneLoadingProgess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SceneLoadingProgess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SceneLoadingProgess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SceneLoadingProgess() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Integer, ::Float>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Integer, ::Float>* streamer) {
                       return this->StreamedSceneLoadingProgess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SceneLoadingProgess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SceneLoadingProgess(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::Float* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSceneLoadingProgess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Integer,::Float>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SceneLoadingProgess<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_LoadObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_LoadObjects() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Integer, ::ObjModel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Integer, ::ObjModel>* streamer) {
                       return this->StreamedLoadObjects(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_LoadObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadObjects(::grpc::ServerContext* /*context*/, const ::Integer* /*request*/, ::grpc::ServerWriter< ::ObjModel>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedLoadObjects(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Integer,::ObjModel>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_LoadObjects<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_LoadObjects<WithStreamedUnaryMethod_SceneLoadingProgess<Service > > StreamedService;
};


#endif  // GRPC_SceneObject_2eproto__INCLUDED
