// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SceneObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SceneObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SceneObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SceneObject_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SceneObject_2eproto;
class Float;
struct FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class Integer;
struct IntegerDefaultTypeInternal;
extern IntegerDefaultTypeInternal _Integer_default_instance_;
class ObjModel;
struct ObjModelDefaultTypeInternal;
extern ObjModelDefaultTypeInternal _ObjModel_default_instance_;
class ObjectMsg;
struct ObjectMsgDefaultTypeInternal;
extern ObjectMsgDefaultTypeInternal _ObjectMsg_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Float* Arena::CreateMaybeMessage<::Float>(Arena*);
template<> ::Integer* Arena::CreateMaybeMessage<::Integer>(Arena*);
template<> ::ObjModel* Arena::CreateMaybeMessage<::ObjModel>(Arena*);
template<> ::ObjectMsg* Arena::CreateMaybeMessage<::ObjectMsg>(Arena*);
template<> ::Vector3* Arena::CreateMaybeMessage<::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SceneObject_2eproto;
};
// -------------------------------------------------------------------

class ObjectMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectMsg) */ {
 public:
  inline ObjectMsg() : ObjectMsg(nullptr) {}
  ~ObjectMsg() override;
  explicit PROTOBUF_CONSTEXPR ObjectMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectMsg(const ObjectMsg& from);
  ObjectMsg(ObjectMsg&& from) noexcept
    : ObjectMsg() {
    *this = ::std::move(from);
  }

  inline ObjectMsg& operator=(const ObjectMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectMsg& operator=(ObjectMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectMsg* internal_default_instance() {
    return reinterpret_cast<const ObjectMsg*>(
               &_ObjectMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectMsg& a, ObjectMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectMsg& from) {
    ObjectMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectMsg";
  }
  protected:
  explicit ObjectMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kScaleFieldNumber = 4,
  };
  // string modelName = 1;
  void clear_modelname();
  const std::string& modelname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modelname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modelname();
  PROTOBUF_NODISCARD std::string* release_modelname();
  void set_allocated_modelname(std::string* modelname);
  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(const std::string& value);
  std::string* _internal_mutable_modelname();
  public:

  // .Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Vector3& position() const;
  PROTOBUF_NODISCARD ::Vector3* release_position();
  ::Vector3* mutable_position();
  void set_allocated_position(::Vector3* position);
  private:
  const ::Vector3& _internal_position() const;
  ::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Vector3* position);
  ::Vector3* unsafe_arena_release_position();

  // .Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Vector3* release_rotation();
  ::Vector3* mutable_rotation();
  void set_allocated_rotation(::Vector3* rotation);
  private:
  const ::Vector3& _internal_rotation() const;
  ::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Vector3* rotation);
  ::Vector3* unsafe_arena_release_rotation();

  // .Vector3 scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::Vector3& scale() const;
  PROTOBUF_NODISCARD ::Vector3* release_scale();
  ::Vector3* mutable_scale();
  void set_allocated_scale(::Vector3* scale);
  private:
  const ::Vector3& _internal_scale() const;
  ::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::Vector3* scale);
  ::Vector3* unsafe_arena_release_scale();

  // @@protoc_insertion_point(class_scope:ObjectMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelname_;
    ::Vector3* position_;
    ::Vector3* rotation_;
    ::Vector3* scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SceneObject_2eproto;
};
// -------------------------------------------------------------------

class ObjModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjModel) */ {
 public:
  inline ObjModel() : ObjModel(nullptr) {}
  ~ObjModel() override;
  explicit PROTOBUF_CONSTEXPR ObjModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjModel(const ObjModel& from);
  ObjModel(ObjModel&& from) noexcept
    : ObjModel() {
    *this = ::std::move(from);
  }

  inline ObjModel& operator=(const ObjModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjModel& operator=(ObjModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjModel* internal_default_instance() {
    return reinterpret_cast<const ObjModel*>(
               &_ObjModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjModel& a, ObjModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjModel& from) {
    ObjModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjModel";
  }
  protected:
  explicit ObjModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 2,
    kNormalsFieldNumber = 3,
    kIndicesFieldNumber = 4,
    kModelNameFieldNumber = 1,
  };
  // repeated .Vector3 vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::Vector3* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >*
      mutable_vertices();
  private:
  const ::Vector3& _internal_vertices(int index) const;
  ::Vector3* _internal_add_vertices();
  public:
  const ::Vector3& vertices(int index) const;
  ::Vector3* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >&
      vertices() const;

  // repeated .Vector3 normals = 3;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::Vector3* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >*
      mutable_normals();
  private:
  const ::Vector3& _internal_normals(int index) const;
  ::Vector3* _internal_add_normals();
  public:
  const ::Vector3& normals(int index) const;
  ::Vector3* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >&
      normals() const;

  // repeated uint32 indices = 4;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  uint32_t _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_indices() const;
  void _internal_add_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_indices();
  public:
  uint32_t indices(int index) const;
  void set_indices(int index, uint32_t value);
  void add_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_indices();

  // string modelName = 1;
  void clear_modelname();
  const std::string& modelname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modelname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modelname();
  PROTOBUF_NODISCARD std::string* release_modelname();
  void set_allocated_modelname(std::string* modelname);
  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(const std::string& value);
  std::string* _internal_mutable_modelname();
  public:

  // @@protoc_insertion_point(class_scope:ObjModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 > normals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > indices_;
    mutable std::atomic<int> _indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SceneObject_2eproto;
};
// -------------------------------------------------------------------

class Integer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Integer) */ {
 public:
  inline Integer() : Integer(nullptr) {}
  ~Integer() override;
  explicit PROTOBUF_CONSTEXPR Integer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Integer(const Integer& from);
  Integer(Integer&& from) noexcept
    : Integer() {
    *this = ::std::move(from);
  }

  inline Integer& operator=(const Integer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Integer& operator=(Integer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Integer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Integer* internal_default_instance() {
    return reinterpret_cast<const Integer*>(
               &_Integer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Integer& a, Integer& b) {
    a.Swap(&b);
  }
  inline void Swap(Integer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Integer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Integer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Integer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Integer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Integer& from) {
    Integer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Integer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Integer";
  }
  protected:
  explicit Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntegerFieldNumber = 1,
  };
  // int32 integer = 1;
  void clear_integer();
  int32_t integer() const;
  void set_integer(int32_t value);
  private:
  int32_t _internal_integer() const;
  void _internal_set_integer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Integer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t integer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SceneObject_2eproto;
};
// -------------------------------------------------------------------

class Float final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Float) */ {
 public:
  inline Float() : Float(nullptr) {}
  ~Float() override;
  explicit PROTOBUF_CONSTEXPR Float(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Float(const Float& from);
  Float(Float&& from) noexcept
    : Float() {
    *this = ::std::move(from);
  }

  inline Float& operator=(const Float& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float& operator=(Float&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float* internal_default_instance() {
    return reinterpret_cast<const Float*>(
               &_Float_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Float& a, Float& b) {
    a.Swap(&b);
  }
  inline void Swap(Float* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Float>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Float& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Float& from) {
    Float::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Float";
  }
  protected:
  explicit Float(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:Float)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SceneObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3.z)
}

// -------------------------------------------------------------------

// ObjectMsg

// string modelName = 1;
inline void ObjectMsg::clear_modelname() {
  _impl_.modelname_.ClearToEmpty();
}
inline const std::string& ObjectMsg::modelname() const {
  // @@protoc_insertion_point(field_get:ObjectMsg.modelName)
  return _internal_modelname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMsg::set_modelname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modelname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ObjectMsg.modelName)
}
inline std::string* ObjectMsg::mutable_modelname() {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:ObjectMsg.modelName)
  return _s;
}
inline const std::string& ObjectMsg::_internal_modelname() const {
  return _impl_.modelname_.Get();
}
inline void ObjectMsg::_internal_set_modelname(const std::string& value) {
  
  _impl_.modelname_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMsg::_internal_mutable_modelname() {
  
  return _impl_.modelname_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMsg::release_modelname() {
  // @@protoc_insertion_point(field_release:ObjectMsg.modelName)
  return _impl_.modelname_.Release();
}
inline void ObjectMsg::set_allocated_modelname(std::string* modelname) {
  if (modelname != nullptr) {
    
  } else {
    
  }
  _impl_.modelname_.SetAllocated(modelname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modelname_.IsDefault()) {
    _impl_.modelname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ObjectMsg.modelName)
}

// .Vector3 position = 2;
inline bool ObjectMsg::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool ObjectMsg::has_position() const {
  return _internal_has_position();
}
inline void ObjectMsg::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Vector3& ObjectMsg::_internal_position() const {
  const ::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& ObjectMsg::position() const {
  // @@protoc_insertion_point(field_get:ObjectMsg.position)
  return _internal_position();
}
inline void ObjectMsg::unsafe_arena_set_allocated_position(
    ::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ObjectMsg.position)
}
inline ::Vector3* ObjectMsg::release_position() {
  
  ::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* ObjectMsg::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ObjectMsg.position)
  
  ::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Vector3* ObjectMsg::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Vector3* ObjectMsg::mutable_position() {
  ::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ObjectMsg.position)
  return _msg;
}
inline void ObjectMsg::set_allocated_position(::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ObjectMsg.position)
}

// .Vector3 rotation = 3;
inline bool ObjectMsg::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool ObjectMsg::has_rotation() const {
  return _internal_has_rotation();
}
inline void ObjectMsg::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Vector3& ObjectMsg::_internal_rotation() const {
  const ::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& ObjectMsg::rotation() const {
  // @@protoc_insertion_point(field_get:ObjectMsg.rotation)
  return _internal_rotation();
}
inline void ObjectMsg::unsafe_arena_set_allocated_rotation(
    ::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ObjectMsg.rotation)
}
inline ::Vector3* ObjectMsg::release_rotation() {
  
  ::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* ObjectMsg::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ObjectMsg.rotation)
  
  ::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Vector3* ObjectMsg::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Vector3* ObjectMsg::mutable_rotation() {
  ::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:ObjectMsg.rotation)
  return _msg;
}
inline void ObjectMsg::set_allocated_rotation(::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ObjectMsg.rotation)
}

// .Vector3 scale = 4;
inline bool ObjectMsg::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool ObjectMsg::has_scale() const {
  return _internal_has_scale();
}
inline void ObjectMsg::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
inline const ::Vector3& ObjectMsg::_internal_scale() const {
  const ::Vector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& ObjectMsg::scale() const {
  // @@protoc_insertion_point(field_get:ObjectMsg.scale)
  return _internal_scale();
}
inline void ObjectMsg::unsafe_arena_set_allocated_scale(
    ::Vector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ObjectMsg.scale)
}
inline ::Vector3* ObjectMsg::release_scale() {
  
  ::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* ObjectMsg::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:ObjectMsg.scale)
  
  ::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::Vector3* ObjectMsg::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::Vector3* ObjectMsg::mutable_scale() {
  ::Vector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:ObjectMsg.scale)
  return _msg;
}
inline void ObjectMsg::set_allocated_scale(::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:ObjectMsg.scale)
}

// -------------------------------------------------------------------

// ObjModel

// string modelName = 1;
inline void ObjModel::clear_modelname() {
  _impl_.modelname_.ClearToEmpty();
}
inline const std::string& ObjModel::modelname() const {
  // @@protoc_insertion_point(field_get:ObjModel.modelName)
  return _internal_modelname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjModel::set_modelname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modelname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ObjModel.modelName)
}
inline std::string* ObjModel::mutable_modelname() {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:ObjModel.modelName)
  return _s;
}
inline const std::string& ObjModel::_internal_modelname() const {
  return _impl_.modelname_.Get();
}
inline void ObjModel::_internal_set_modelname(const std::string& value) {
  
  _impl_.modelname_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjModel::_internal_mutable_modelname() {
  
  return _impl_.modelname_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjModel::release_modelname() {
  // @@protoc_insertion_point(field_release:ObjModel.modelName)
  return _impl_.modelname_.Release();
}
inline void ObjModel::set_allocated_modelname(std::string* modelname) {
  if (modelname != nullptr) {
    
  } else {
    
  }
  _impl_.modelname_.SetAllocated(modelname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modelname_.IsDefault()) {
    _impl_.modelname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ObjModel.modelName)
}

// repeated .Vector3 vertices = 2;
inline int ObjModel::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int ObjModel::vertices_size() const {
  return _internal_vertices_size();
}
inline void ObjModel::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::Vector3* ObjModel::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:ObjModel.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >*
ObjModel::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:ObjModel.vertices)
  return &_impl_.vertices_;
}
inline const ::Vector3& ObjModel::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::Vector3& ObjModel::vertices(int index) const {
  // @@protoc_insertion_point(field_get:ObjModel.vertices)
  return _internal_vertices(index);
}
inline ::Vector3* ObjModel::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::Vector3* ObjModel::add_vertices() {
  ::Vector3* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:ObjModel.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >&
ObjModel::vertices() const {
  // @@protoc_insertion_point(field_list:ObjModel.vertices)
  return _impl_.vertices_;
}

// repeated .Vector3 normals = 3;
inline int ObjModel::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int ObjModel::normals_size() const {
  return _internal_normals_size();
}
inline void ObjModel::clear_normals() {
  _impl_.normals_.Clear();
}
inline ::Vector3* ObjModel::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:ObjModel.normals)
  return _impl_.normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >*
ObjModel::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:ObjModel.normals)
  return &_impl_.normals_;
}
inline const ::Vector3& ObjModel::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline const ::Vector3& ObjModel::normals(int index) const {
  // @@protoc_insertion_point(field_get:ObjModel.normals)
  return _internal_normals(index);
}
inline ::Vector3* ObjModel::_internal_add_normals() {
  return _impl_.normals_.Add();
}
inline ::Vector3* ObjModel::add_normals() {
  ::Vector3* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:ObjModel.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Vector3 >&
ObjModel::normals() const {
  // @@protoc_insertion_point(field_list:ObjModel.normals)
  return _impl_.normals_;
}

// repeated uint32 indices = 4;
inline int ObjModel::_internal_indices_size() const {
  return _impl_.indices_.size();
}
inline int ObjModel::indices_size() const {
  return _internal_indices_size();
}
inline void ObjModel::clear_indices() {
  _impl_.indices_.Clear();
}
inline uint32_t ObjModel::_internal_indices(int index) const {
  return _impl_.indices_.Get(index);
}
inline uint32_t ObjModel::indices(int index) const {
  // @@protoc_insertion_point(field_get:ObjModel.indices)
  return _internal_indices(index);
}
inline void ObjModel::set_indices(int index, uint32_t value) {
  _impl_.indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:ObjModel.indices)
}
inline void ObjModel::_internal_add_indices(uint32_t value) {
  _impl_.indices_.Add(value);
}
inline void ObjModel::add_indices(uint32_t value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:ObjModel.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ObjModel::_internal_indices() const {
  return _impl_.indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ObjModel::indices() const {
  // @@protoc_insertion_point(field_list:ObjModel.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ObjModel::_internal_mutable_indices() {
  return &_impl_.indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ObjModel::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:ObjModel.indices)
  return _internal_mutable_indices();
}

// -------------------------------------------------------------------

// Integer

// int32 integer = 1;
inline void Integer::clear_integer() {
  _impl_.integer_ = 0;
}
inline int32_t Integer::_internal_integer() const {
  return _impl_.integer_;
}
inline int32_t Integer::integer() const {
  // @@protoc_insertion_point(field_get:Integer.integer)
  return _internal_integer();
}
inline void Integer::_internal_set_integer(int32_t value) {
  
  _impl_.integer_ = value;
}
inline void Integer::set_integer(int32_t value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:Integer.integer)
}

// -------------------------------------------------------------------

// Float

// float value = 1;
inline void Float::clear_value() {
  _impl_.value_ = 0;
}
inline float Float::_internal_value() const {
  return _impl_.value_;
}
inline float Float::value() const {
  // @@protoc_insertion_point(field_get:Float.value)
  return _internal_value();
}
inline void Float::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void Float::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Float.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SceneObject_2eproto
